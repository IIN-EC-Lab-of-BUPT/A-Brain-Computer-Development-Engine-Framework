# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import Common.protobuf.out.AlgorithmRPCService_pb2 as AlgorithmRPCService__pb2
import Common.protobuf.out.BaseDataClassMessage_pb2 as BaseDataClassMessage__pb2

GRPC_GENERATED_VERSION = '1.63.0'
GRPC_VERSION = grpc.__version__
EXPECTED_ERROR_RELEASE = '1.65.0'
SCHEDULED_RELEASE_DATE = 'June 25, 2024'
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    warnings.warn(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in AlgorithmRPCService_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
        + f' This warning will become an error in {EXPECTED_ERROR_RELEASE},'
        + f' scheduled for release on {SCHEDULED_RELEASE_DATE}.',
        RuntimeWarning
    )


class AlgorithmRPCServiceControlStub(object):
    """定义服务控制服务，包括初始化配置、更新配置、获取配置、启动和关闭操作
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.sendConfig = channel.unary_unary(
                '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/sendConfig',
                request_serializer=BaseDataClassMessage__pb2.StringMessage.SerializeToString,
                response_deserializer=BaseDataClassMessage__pb2.EmptyMessage.FromString,
                _registered_method=True)
        self.getConfig = channel.unary_unary(
                '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/getConfig',
                request_serializer=BaseDataClassMessage__pb2.EmptyMessage.SerializeToString,
                response_deserializer=BaseDataClassMessage__pb2.StringMessage.FromString,
                _registered_method=True)
        self.shutdown = channel.unary_unary(
                '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/shutdown',
                request_serializer=BaseDataClassMessage__pb2.EmptyMessage.SerializeToString,
                response_deserializer=BaseDataClassMessage__pb2.BooleanMessage.FromString,
                _registered_method=True)


class AlgorithmRPCServiceControlServicer(object):
    """定义服务控制服务，包括初始化配置、更新配置、获取配置、启动和关闭操作
    """

    def sendConfig(self, request, context):
        """发送配置，接收配置字符串并返回空消息，配置字符串通常采用YAML格式
        发送内容仅包含一个字段:
        'challenge_to_algorithm_config':
        challeng_config.yaml中对应字段的配置信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getConfig(self, request, context):
        """获取配置，返回配置字符串，配置字符串通常采用YAML格式
        返回内容包括两个主要字段
        'sources':
        source_label_1:
        None
        source_label_2:
        None
        ……
        'challenge_to_algorithm_config':
        challeng_config.yaml中对应字段的配置信息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def shutdown(self, request, context):
        """关闭服务，返回关闭成功与否的布尔值（只应用在需要彻底关闭服务的模式下，通常情况下系统服务由框架管理，不需要关闭)
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgorithmRPCServiceControlServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'sendConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.sendConfig,
                    request_deserializer=BaseDataClassMessage__pb2.StringMessage.FromString,
                    response_serializer=BaseDataClassMessage__pb2.EmptyMessage.SerializeToString,
            ),
            'getConfig': grpc.unary_unary_rpc_method_handler(
                    servicer.getConfig,
                    request_deserializer=BaseDataClassMessage__pb2.EmptyMessage.FromString,
                    response_serializer=BaseDataClassMessage__pb2.StringMessage.SerializeToString,
            ),
            'shutdown': grpc.unary_unary_rpc_method_handler(
                    servicer.shutdown,
                    request_deserializer=BaseDataClassMessage__pb2.EmptyMessage.FromString,
                    response_serializer=BaseDataClassMessage__pb2.BooleanMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlgorithmRPCServiceControl(object):
    """定义服务控制服务，包括初始化配置、更新配置、获取配置、启动和关闭操作
    """

    @staticmethod
    def sendConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/sendConfig',
            BaseDataClassMessage__pb2.StringMessage.SerializeToString,
            BaseDataClassMessage__pb2.EmptyMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def getConfig(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/getConfig',
            BaseDataClassMessage__pb2.EmptyMessage.SerializeToString,
            BaseDataClassMessage__pb2.StringMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def shutdown(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/BCICompetitionFramework.Algorithm.AlgorithmRPCServiceControl/shutdown',
            BaseDataClassMessage__pb2.EmptyMessage.SerializeToString,
            BaseDataClassMessage__pb2.BooleanMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class AlgorithmRPCDataConnectStub(object):
    """定义数据连接服务，支持双向流式传输数据消息和报告消息
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.connect = channel.stream_stream(
                '/BCICompetitionFramework.Algorithm.AlgorithmRPCDataConnect/connect',
                request_serializer=AlgorithmRPCService__pb2.AlgorithmDataMessage.SerializeToString,
                response_deserializer=AlgorithmRPCService__pb2.AlgorithmReportMessage.FromString,
                _registered_method=True)


class AlgorithmRPCDataConnectServicer(object):
    """定义数据连接服务，支持双向流式传输数据消息和报告消息
    """

    def connect(self, request_iterator, context):
        """建立连接，接收流式数据消息并返回流式报告消息
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_AlgorithmRPCDataConnectServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'connect': grpc.stream_stream_rpc_method_handler(
                    servicer.connect,
                    request_deserializer=AlgorithmRPCService__pb2.AlgorithmDataMessage.FromString,
                    response_serializer=AlgorithmRPCService__pb2.AlgorithmReportMessage.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'BCICompetitionFramework.Algorithm.AlgorithmRPCDataConnect', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class AlgorithmRPCDataConnect(object):
    """定义数据连接服务，支持双向流式传输数据消息和报告消息
    """

    @staticmethod
    def connect(request_iterator,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            '/BCICompetitionFramework.Algorithm.AlgorithmRPCDataConnect/connect',
            AlgorithmRPCService__pb2.AlgorithmDataMessage.SerializeToString,
            AlgorithmRPCService__pb2.AlgorithmReportMessage.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
